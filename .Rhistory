# ###########################################################################
# Journalclub management - announce next meeting
#
# $Date: 2017-12-08
#
# Author: Philipp Brun, philipp.brun@wsl.ch
# Dynamic Macroecology Group
# Swiss Federal Research Institute WSL
#
# Description:
#
# ###########################################################################
### =========================================================================
### Initialise system
### =========================================================================
# Start with house cleaning
rm(list = ls()); graphics.off()
# Load necessary Packages
library(dplyr)
# Set working directory
setwd("C:/Users/brunp/switchdrive/WSL/R/0_Journalclub_homepage/")
# Source custom functions
source("Src/functions.R")
### =========================================================================
### Load data
### =========================================================================
jc_events<-read.csv("Data/JC_events_v1.csv",header=T,sep=";",stringsAsFactors = F)
bd_events_2018<-read.csv("N:/prj/Biodiversity_events/txt/2018_All Seminars & Meetings.xlsm-2018.csv",header=T,sep=";",stringsAsFactors = F)
### =========================================================================
### Harmonize table
### =========================================================================
# Make dates understandable
jc_events$Date_2<-as.Date(jc_events$Date,format="%d.%m.%Y")
bd_events_2018$Date_2<-as.Date(bd_events_2018$DATE,format="%d.%m.%Y")
# Fix names
colnames(bd_events_2018)[which(colnames(bd_events_2018)=="EMAIL")]<-"Email"
colnames(jc_events)[which(colnames(jc_events)=="Presenter_email")]<-"Email"
# Merge bd_events of different years
bd_events<-(bd_events_2018[,-which(colnames(bd_events_2018)=="X")])
### =========================================================================
### Merge BD and JC
### =========================================================================
bd_events<-bd_events[,-which(colnames(bd_events)=="DATE")]
jc_events<-jc_events[,-which(colnames(jc_events)=="Date")]
colnames(bd_events)[which(colnames(bd_events)=="TITLE")]<-"Title"
colnames(bd_events)[which(colnames(bd_events)=="LECTURER")]<-"Presenter"
colnames(bd_events)[which(colnames(bd_events)=="Event")]<-"Event_type"
merg<-merge(bd_events,jc_events,all=T)
# Turn factors into characters
for(i in 1:ncol(merg)){
if(class(merg[,i])=="Factor"){x<-as.character(merg[,i])}
}
### =========================================================================
### Split to future, past & this week
### =========================================================================
# Move unassigned slots in future to open slots table
wi<-which(merg$Event_type%in%c("Journal club","BD-Seminar","Discussion Seminar") &
merg$Presenter=="")
open.slots<-merg[wi,]
merg<-merg[-wi,]
# Check if journal club information can be updated from the emails
wo<-which(merg$Event_type=="Journal club" & !is.na(merg$Presenter))
for(i in 1:length(wo)){
if(merg$Title[wo[i]]=="" || is.na(merg$Title[wo[i]])){
try(merg[wo[i],]<-update.jc_info(merg[wo[i],,drop=F]))
}
}
past<-merg[which(merg$Date_2<Sys.Date()),]
this_week<-merg[which(merg$Date_2>=Sys.Date() & merg$Date_2<(Sys.Date()+7)),]
next_week<-merg[which(merg$Date_2>=Sys.Date()+7 & merg$Date_2<(Sys.Date()+14)),]
future<-merg[which(merg$Date_2>=(Sys.Date()+7)),]
past<-past[order(past$Date_2,decreasing = T),]
this_week<-this_week[order(this_week$Date_2,decreasing = F),]
future<-future[order(future$Date_2,decreasing = F),]
open.slots<-open.slots[order(open.slots$Date_2,decreasing = F),]
# ###########################################################################
# Journalclub management - announce next meeting
#
# $Date: 2017-12-08
#
# Author: Philipp Brun, philipp.brun@wsl.ch
# Dynamic Macroecology Group
# Swiss Federal Research Institute WSL
#
# Description:
#
# ###########################################################################
### =========================================================================
### Initialise system
### =========================================================================
# Start with house cleaning
rm(list = ls()); graphics.off()
# Load necessary Packages
library(dplyr)
# Set working directory
setwd("C:/Users/brunp/switchdrive/WSL/R/0_Journalclub_homepage/")
# Source custom functions
source("Src/functions.R")
### =========================================================================
### Load data
### =========================================================================
jc_events<-read.csv("Data/JC_events_v1.csv",header=T,sep=";",stringsAsFactors = F)
bd_events_2018<-read.csv("N:/prj/Biodiversity_events/txt/2018_All Seminars & Meetings.xlsm-2018.csv",header=T,sep=";",stringsAsFactors = F)
### =========================================================================
### Harmonize table
### =========================================================================
# Make dates understandable
jc_events$Date_2<-as.Date(jc_events$Date,format="%d.%m.%Y")
bd_events_2018$Date_2<-as.Date(bd_events_2018$DATE,format="%d.%m.%Y")
# Fix names
colnames(bd_events_2018)[which(colnames(bd_events_2018)=="EMAIL")]<-"Email"
colnames(jc_events)[which(colnames(jc_events)=="Presenter_email")]<-"Email"
# Merge bd_events of different years
bd_events<-(bd_events_2018[,-which(colnames(bd_events_2018)=="X")])
### =========================================================================
### Merge BD and JC
### =========================================================================
bd_events<-bd_events[,-which(colnames(bd_events)=="DATE")]
jc_events<-jc_events[,-which(colnames(jc_events)=="Date")]
colnames(bd_events)[which(colnames(bd_events)=="TITLE")]<-"Title"
colnames(bd_events)[which(colnames(bd_events)=="LECTURER")]<-"Presenter"
colnames(bd_events)[which(colnames(bd_events)=="Event")]<-"Event_type"
merg<-merge(bd_events,jc_events,all=T)
# Turn factors into characters
for(i in 1:ncol(merg)){
if(class(merg[,i])=="Factor"){x<-as.character(merg[,i])}
}
### =========================================================================
### Split to future, past & this week
### =========================================================================
# Move unassigned slots in future to open slots table
wi<-which(merg$Event_type%in%c("Journal club","BD-Seminar","Discussion Seminar") &
merg$Presenter=="")
open.slots<-merg[wi,]
merg<-merg[-wi,]
# Check if journal club information can be updated from the emails
wo<-which(merg$Event_type=="Journal club" & !is.na(merg$Presenter))
for(i in 1:length(wo)){
if(merg$Title[wo[i]]=="" || is.na(merg$Title[wo[i]])){
try(merg[wo[i],]<-update.jc_info(merg[wo[i],,drop=F]))
}
}
past<-merg[which(merg$Date_2<Sys.Date()),]
this_week<-merg[which(merg$Date_2>=Sys.Date() & merg$Date_2<(Sys.Date()+7)),]
next_week<-merg[which(merg$Date_2>=Sys.Date()+7 & merg$Date_2<(Sys.Date()+14)),]
future<-merg[which(merg$Date_2>=(Sys.Date()+7)),]
past<-past[order(past$Date_2,decreasing = T),]
this_week<-this_week[order(this_week$Date_2,decreasing = F),]
future<-future[order(future$Date_2,decreasing = F),]
open.slots<-open.slots[order(open.slots$Date_2,decreasing = F),]
### =========================================================================
### Write abstract subpages
### =========================================================================
tifu=rbind(this_week,future)
for(i in 1:nrow(tifu)){
if(tifu$Event[i]%in%c("BD-Seminar","Discussion Seminar","JC Presentation") && tifu$ABSTRACT[i]!=""){
make_abstract.htm(tifu[i,,drop=F])
}
}
### =========================================================================
### Make the page
### =========================================================================
past.tab<-htm.tab(past,type="event")
future.tab<-htm.tab(future,type="event")
open.slot.tab<-htm.tab(open.slots,type="free.slot")
this_week.tab<-htm.tab(this_week,type="event")
# Create events table
vars<-c(THISWEEK=this_week.tab,FUTURE=future.tab,PAST=past.tab)
out="Q:/lud/biodiversity_events/schedule.htm"
txt<-readLines("Data/schedule_template.htm")
prep.mail(txt,vars,out)
# Create free slots table
vars=c(FREESLOTS=open.slot.tab)
out="Q:/lud/biodiversity_events/freeslots.htm"
txt<-readLines("Data/freeslots_template.htm")
prep.mail(txt,vars,out)
### =========================================================================
### Send info mail for this week
#
save=F
!save
?list.dirs
checks=function(env = parent.frame()){
#check for replicate type
if(replicatetype%in%c("none","crossvalidate","splitsample")==F){stop("Non-existing replicatetype!")}
if(replicatetype%in%c("crossvalidate","splitsample")==T && (is.na("reps") ==T || reps<2)){stop("Give reasonalbe number of replicates!")}
if(replicatetype=="none" && reps>1){reps=out@replicates=1;warning("Replicate type is 'none' but multiple replicates were chosen - replicates are set to 1")}
#check for file path
if(!save && is.na(project)){stop("supply project in which data should be saved!")}
if(!save && !(project%in%list.dirs(path))){stop(paste("Project directory not existing in",path,
"- please create manually"))}
}
Sys.info()
Sys.info()[["user"]]
Sys.date()
Sys.Date()
Sys.time()
### =========================================================================
partition=function(replicatetype,reps,dat,strata){
obschoice<-list()
testing<-list()
if(replicatetype=="none"){
obschoice[[1]]<-dat
} else if (replicatetype=="splitsample"){
for (i in 1:reps){
obschoice[[i]]<-dat[sample(1:nrow(dat),size=round(maxobs*0.7),replace=F),]
testing[[i]]<-dat[c(1:nrow(dat))[-which(1:nrow(dat)%in%obschoice[[i]])],]
}
} else if (grepl("cv",replicatetype)){
if(replicatetype=="cv"){
unistr=sample(1:5,size=nrow(dat),replace=T)
} else {
unistr=unique(strata)
}
for (i in 1:reps){
obschoice[[i]]<-dat[which(strata!=unistr[i]),]
testing[[i]]<-dat[which(strata!=unistr[i]),]
}
}
out=list(training=obschoice,testing=testing)
return(out)
}
setwd("R:/brunp/cluster_jobs/SDM_correlation/Src/Tools/wsl_biodiv/")
library(MASS)
library(ROCR)
# ###########################################################################
# Get an overview over the data and figure out which traits make most sense
# to be used
#
# $Date: 2017-11-29
#
# Author: Philipp Brun, philipp.brun@wsl.ch
# National Institute of Aquatic Resources (DTU-Aqua),
# Technical University of Denmark, Charlottenlund
#
# ###########################################################################
### =========================================================================
### Initialise system
### =========================================================================
# Start with house cleaning
rm(list = ls()); graphics.off()
### =========================================================================
### Get ID
### =========================================================================
setwd("R:/brunp/cluster_jobs/SDM_correlation/Src/Tools/wsl_biodiv/")
### =========================================================================
### Initialise system
### =========================================================================
# Load necessary Packages
library(mgcv)
library(dismo)
# source functions
scr=list.files("functions/",full.names=T)
for(i in 1:length(scr)){source(scr[i])}
data()
# Take anguilla data set from dismo package
ang=data("Anguilla_train")
dim(ang)
head(ang)
# Take anguilla data set from dismo package
data("Anguilla_train")
head(Anguilla_train)
plot(Anguilla_train)
### =========================================================================
### Initialise system
### =========================================================================
# Start with house cleaning
rm(list = ls()); graphics.off()
setwd("R:/brunp/cluster_jobs/SDM_correlation/Src/Tools/wsl_biodiv/")
### =========================================================================
### Initialise system
### =========================================================================
# Load necessary Packages
library(mgcv)
library(dismo)
# source functions
scr=list.files("functions/",full.names=T)
for(i in 1:length(scr)){source(scr[i])}
### =========================================================================
### Prepare data
### =========================================================================
# Take anguilla data set from dismo package
data("Anguilla_train")
colnames(Anguilla_train)
head(Anguilla_train)
hist(Anguilla_train$SegSumT)
hist(Anguilla_train$SegTSeas)
hist(Anguilla_train$SegLowFlow)
hist(Anguilla_train$DSDist)
hist(Anguilla_train$DSDam)
hist(Anguilla_train$MaxSlope)
hist(Anguilla_train$DSMaxSlope)
hist(Anguilla_train$LocSed)
hist(Anguilla_train$USRainDays)
hist(Anguilla_train$USRainSlope)
hist(Anguilla_train$USSlope)
form=as.formula(paste("Presence~",paste(paste0("poly(",vrs,",2)"),collapse="+")))
# Run wsl glm
vrs=c("SegSumT","USRainDays","USSlope")
form=as.formula(paste("Presence~",paste(paste0("poly(",vrs,",2)"),collapse="+")))
form
View(wsl.glm)
?glm
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
View(checks)
ls()
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
print(colnames(env$env_vars))
setwd("R:/brunp/cluster_jobs/SDM_correlation/Src/Tools/wsl_biodiv/")
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
# source functions
scr=list.files("functions/",full.names=T)
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
?assign
?parent.env
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
# source functions
scr=list.files("functions/",full.names=T)
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
for(i in 1:length(scr)){source(scr[i])}
modi=wsl.glm(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="cv",
reps=5,
project="prototest",
formula=form)
