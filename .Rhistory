quadS<-wsl.quads()
quadS@call = call
quadS@coords = quads[,c(2,3)]
quadS@Qenv = quads[,-c(2,3)]
}
return(quadS)
}
quadG1 = wsl.quadrature(mask = maskR,
area.win = wind,
random = FALSE,
lasso = TRUE,
env_vars = rst)
#' Poisson Point Process Models (PPPM) 'quadrature'
#'
#' Set up quadrature points (or "background points") necessary to run 'wsl.ppmO' and
#' 'wsl.ppmGlasso' fit functions. Those points apply a spatial scaling proportional to the study
#' area and estimate the maximised model log likelihood (see Renner 2013, Renner et al. 2015)
#'
#' @param mask Object of class 'RasterLayer' or 'RasterBrick' or 'RasterStack'. Mask is defined
#' according to non NAs values. Defined study area in pixels used to grid sample the quadrature points.
#' Same as in 'wsl.ppm.env'
#' @param area.win Object of class 'owin'. 'owin' output of 'wsl.ppm.window'
#' @param random Logical. Should quadrature points be generated randomly or according
#' to a regular mask ?
#' @param nQ To choose the number of random quadrature points in case 'random=TRUE'
#' @param lasso Logical. Form of the output. If TRUE, 'wsl.ppmGlasso' is used
#' @param env_vars Only when 'lasso=TRUE'. Object of class 'RasterBrick' or 'RasterStack'.
#' Set of predictors the user wants to use to fit the model
#' @return Object of class 'ppp' or 'list'
#' @author Yohann Chauvier
#' @examples
#'
#' #### Load
#'
#' data(AlpineConvention_lonlat)
#' data(exrst)
#'
#' ### Define mask
#'
#' maskR = mask(rst[[1]],shp.lonlat)
#'
#' ### Run 'wsl.ppm.window' function
#'
#' wind = wsl.ppm.window(mask = maskR,
#'                       val = 1,
#'                       owin = TRUE)
#'
#' ### Define quadrature points for 'wsl.ppmGlasso'
#'
#'    # Grid regular
#' quadG1 = wsl.quadrature(mask = maskR,
#'                         area.win = wind,
#'                         random = FALSE,
#'                         lasso = TRUE,
#'                         env_vars = rst)
#'
#'    # Randomly
#' quadG2 = wsl.quadrature(mask = maskR,
#'                         area.win = wind,
#'                         random = TRUE,
#'                         nQ = 100000,
#'                         lasso = TRUE,
#'                         env_vars = rst)
#'
#' ### Define quadrature points for 'wsl.ppmO'
#'
#'    # Grid regular
#' quadO1 = wsl.quadrature(mask = maskR,
#'                         area.win = wind,
#'                         random = FALSE,
#'                         lasso = FALSE,
#'                         env_vars = NULL)
#'
#'    # Randomly
#' quadO2 = wsl.quadrature(mask = maskR,
#'                         area.win = wind,
#'                         random = TRUE,
#'                         nQ = 100000,
#'                         lasso = FALSE,
#'                         env_vars = NULL)
#'
#' @export
### ==================================================================
### To create the quadrature points
### ==================================================================
wsl.quadrature = function(mask,area.win,random=FALSE,nQ=100000,lasso=TRUE,env_vars=NULL)
{
# Extract non NAs values from mask
mask.cells = which(!is.na(mask[]))
# If random sampling
if (random) {
mask.sample = try(sample(mask.cells,nQ,replace=FALSE),silent=TRUE)
if (class(mask.sample)%in%"try-error") {
mask.sample = sample(mask.cells,nQ,replace=TRUE)
}
mask.cells = mask.sample
}
# Create our XY points defining our study area
quad = xyFromCell(mask,mask.cells)
# Creating our quadrature points
quadS = ppp(quad[,1],quad[,2],window=area.win)
# Other type of quadrature points in case of lasso
if (lasso) {
# Extract environmental values on our quadrature points
qind = cellFromXY(env_vars,quad)
qenv = lapply(1:nlayers(env_vars),function(x) env_vars[[x]][][qind])
quads = as.data.frame(cbind(Density=0,quad,do.call("cbind",qenv)))
quads = na.omit(quads)
# Keep infos
names(quads)[4:ncol(quads)] = names(env_vars)
# Return in a wsl.quads obejct
quadS<-wsl.quads()
quadS@coords = quads[,c(2,3)]
quadS@Qenv = quads[,-c(2,3)]
}
return(quadS)
}
quadG1 = wsl.quadrature(mask = maskR,
area.win = wind,
random = FALSE,
lasso = TRUE,
env_vars = rst)
quadG1
quadO1 = wsl.quadrature(mask = maskR,
area.win = wind,
random = FALSE,
lasso = FALSE,
env_vars = NULL)
#'
quadO1
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
get_thres()
get_thres
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
library(raster)
extract
raster::extract
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
library(wsl.biodiv)
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
setwd("C:/Users/Public/Documents/SwitchDrive/gitlab")
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("./wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
library(wsl.biodiv)
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages(("wsl.biodiv"))
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packges(wsl.biodiv)
remove.packages(wsl.biodiv)
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv)")
remove.packages("wsl.biodiv")
devtools::document()
ls()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(rgbif)
install.packages("rgbif")
library(rgbif)
name_backbone("Acer")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source",dependencies=TRUE)
install.packages("snow")
install.packages("gbm")
install.packages("randomForest")
install.packages("ROCR")
install.packages("NMOF")
install.packages("doParallel")
install.packages("spatstat")
install.packages("usdm")
install.packages("neuralnet")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
# To update changes
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv"")
""
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("./wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.gbif
?wsl.glm
?wsl.gbif
library(wsl.plot)
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
wsl.gbif
ws_.gbif
library(wsl.plot)
library(wsl.biodiv)
ws_.gbif
wsl.gbif
wsl.gbif("asteraceae"")
c
""
wsl.gbif("asteraceae")
wsl.gbif("asteraceee")
wsl.gbif("Aster")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
stall.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remov.packages("wsl.biodiv")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.gbif)
library(wsl.biodiv)
wsl.gbif("222")
remove.packages("wsl.biodiv")
devtools::document()
rlang::last_error()
install.packages("rgbif")
install.packages("CoordinateCleaner")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv"")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
wsl.evaluate.pres()
wsl.evaluate.pres
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.ebc
?wsl.ppmGlasso
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("snow")
install.packages("gbm")
install.packages("randomForest")
install.packages("ROCR")
install.packages("NMOF")
install.packages("spatstat")
install.packages("neuralnet")
install.packages("glmnet")
install.packages("coordinateCleaner")
install.packages("CoordinateCleaner")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
wsl.gbif()
wsl.gbif
wsl.gbif("Alagoas curassow")
wsl.gbif("Gymnogyps californianus")
wsl.gbif("Mitu mitu")
wsl.gbif("Mitu mitu",add_infos="hasGeospatialIssue")
wsl.gbif("Mitu mitu")
wsl.gbif("Abies alba")
wsl.gbif("Abies alba",tiles=100)
test=wsl.gbif("Abies alba")
test=wsl.gbif("Abies alba",tiles=10)
test=wsl.gbif("Abies alba",tiles=100)
test=wsl.gbif("Abies alba",tiles=1000)
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
?wsl.gbif
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("tools")
install.packages("tools")
install.packages("tools")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
tinytex::parse_install("filename.log")
tinytex::parse_install()
tinytex::parse_install(letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty)
tinytex::parse_install("letlxmacro.sty")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
tinytex::install_tinytex()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::build_manual()
Sys.getenv
Sys.getenv("C:\Program Files\MiKTeX 2.9\miktex\bin\x64")
Sys.getenv("C:/Program Files/MiKTeX 2.9/miktex/bin/x64")
Sys.getenv("C:/Program Files/MiKTeX 2.9/miktex/bin/x64")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
# To update documentation
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.gbif --output=./wsl_gbif.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
remove.packages("wsl.biodiv")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
library(wsl.biodiv)
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
remove.packages("wsl.biodiv")
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
install.packages("../wsl.biodiv_r_package",repos=NULL,type="source")
devtools::document()
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
devtools::document()
system("R CMD Rd2pdf . --title=wsl.biodiv --output=./wsl_biodiv.pdf --force --no-clean --internals")
