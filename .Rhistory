type="response")
} else if("randomForest"%in%class(mod)){
pred<-predict(mod,
newdata=tst,
type="prob")[,2]
}
# Convert to numeric
pred<-as.numeric(pred)
return(pred)
}
feat=c("linear=true","quadratic=true","hinge=true","product=true","threshold=false")
# Try out wsl.glm funcion
modi4=wsl.maxent(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="block-cv",
reps=3,
strata=sample(1:3,nrow(env),replace=TRUE),
project="prototest",
mod_tag="test-mxe",
args=feat)
# Try out custom summary function
summary(modi4)
# Access glm object of first replicate
summary(modi4@fits$replicate_01$`test-mxe`)
# Define external threshold
thmxe=c(`test-mxe`=0.5)
# Evaluate the model
eval4=wsl.evaluate(modi4,crit="external",thres=thmxe)
# Get evaluation summary
summary(eval4)
summary(eval4@performance)
summary(eval4@performance[[1]])
summary(eval4@performance[[1]][[1]])
eval4@performance[[1]][[1]]
x=modi4
crit="pp=op"
# thres has to be a vector with named elements (same names
# as in evaluation matrix)
if(length(thres)>0){
if(length(x@fits[[1]])!=length(thres)){
stop("Wrong number of thresholds supplied! Should be one threshold per model type...")
}
if(crit!="external"){
warning("Assuming you want external tresholds to be used - setting crit='external'!")
crit="external"
}
}
thres=numeric()
# thres has to be a vector with named elements (same names
# as in evaluation matrix)
if(length(thres)>0){
if(length(x@fits[[1]])!=length(thres)){
stop("Wrong number of thresholds supplied! Should be one threshold per model type...")
}
if(crit!="external"){
warning("Assuming you want external tresholds to be used - setting crit='external'!")
crit="external"
}
}
if(!(crit%in%c("pp=op","maxTSS","external"))){
stop("Invalid threshold criterion chosen!")
}
if(x@meta$replicatetype=="none" && nrow(tester)==0){
stop("External testing data must be supplied for replicatetype 'none'")
} else if(x@meta$replicatetype%in%c("cv","block-cv","splitsample")) {
outerloop<-length(x@tesdat)
testa<-lapply(x@tesdat,function(x){
y<-x[,-which(colnames(x)=="Presence")]
})
papa<-lapply(x@tesdat,function(x){
y<-x[,"Presence"]
})
} else if(x@meta$replicatetype=="none"){
outerloop<-1
testa<-list(tester[,-which(colnames(tester)=="Presence")])
papa<-list(tester[,"Presence"])
}
### ------------------------
### generate wsl.evaluation and add meta info
### ------------------------
out<-preva.meta(type="evaluation")
lis<-list()
i=1
lisa<-list()
# Loop over model types
j=1
# Make prediction
pred=prd(x@fits[[i]][[j]],testa[[i]])
#Feed with external threshold if available
scores<-ceval(f=pred,
pa=papa[[i]],
tesdat=testa[[i]],
crit=crit)
scores
# ###########################################################################
# Second order functions for model evaluation
#
# $Date: 2018-05-08
# Author: Philipp Brun, philipp.brun@wsl.ch
# Dynamic Macroecology Group
# Swiss Federal Research Institute WSL
#
# ###########################################################################
### =========================================================================
### evaluate core function (peval)
### =========================================================================
ceval<-function(f,pa,tesdat,crit,tre=numeric()){
# If there are any presences in the evaluation data
if(any(pa==1)){
z<-prediction(f,pa)
# AUC
auc<-performance(z,measure="auc")@y.values[[1]]
rmse=performance(z,measure="rmse")@y.values[[1]]
# optimum Threshold for conversion into binary outputs
prbos<-seq(from=0,to=1,length.out=length(pa))
zz<-performance(z,measure="sens",x.measure="spec",prbe=100000)
zzz<-performance(z,measure="fpr",x.measure="fnr",prbe=100000)
all.tss=zz@x.values[[1]]+zz@y.values[[1]]-1
all.ppv<-performance(z,measure="ppv",prbe=100000)
all.acc<-performance(z,measure="acc",prbe=100000)
pn=zz@x.values[[1]]*zzz@x.values[[1]]
py=zz@y.values[[1]]*zzz@y.values[[1]]
all.kappa=(all.acc@y.values[[1]]-py*pn)/(1-py*pn)
if(crit=="maxTSS"){
thr=z@cutoffs[[1]][which.max(all.tss)]
} else if(crit=="pp=op"){
thr=quantile(f,probs=1-mean(pa))
}else if(length(tre)!=0){
thr=tre
}
wi=which.min(abs(thr-z@cutoffs[[1]]))
ppv=all.ppv@y.values[[1]][wi]
tss=all.tss[wi]
acc=all.acc@y.values[[1]][wi]
kappa=all.kappa[wi]
# Return evaluation metrics
weg=c(auc=auc,rmse=rmse,ppv=ppv,tss=tss,acc=acc,kappa=kappa,threshold=as.numeric(thr))
return(weg)
}
}
### =========================================================================
### prediction-evaluation meta.info function
### =========================================================================
preva.meta=function(env=parent.frame(),type=character()){
### ------------------------
### generate wsl.evaluation and add meta info
### ------------------------
m.i=list()
m.i$author=Sys.info()[["user"]]
m.i$date=Sys.time()
m.i$wsl.fit=env$x@meta
# Generate pevaluate object
if(type=="evaluation"){
out<-wsl.evaluation()
m.i$cutoff=env$crit
} else {
out<-wsl.prediction()
}
#add Meta info
out@meta<-m.i
return(out)
}
### =========================================================================
### prediction-evaluation prediction function
### =========================================================================
prd=function(mod,tst){
# Generate probabilistic precitions
if("MaxEnt"%in%class(mod)){
pred<-predict(mod,tst)
} else if("glm"%in%class(mod)){
pred<-predict(mod,
newdata=tst,
type="response")
} else if("gbm"%in%class(mod)){
pred<-predict(mod,
newdata=tst,
n.trees=mod$n.trees,
type="response")
} else if("randomForest"%in%class(mod)){
pred<-predict(mod,
newdata=tst,
type="prob")[,2]
}
# Convert to numeric
pred<-as.numeric(pred)
return(pred)
}
feat=c("linear=true","quadratic=true","hinge=true","product=true","threshold=false")
# Try out wsl.glm funcion
modi4=wsl.maxent(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="block-cv",
reps=3,
strata=sample(1:3,nrow(env),replace=TRUE),
project="prototest",
mod_tag="test-mxe",
args=feat)
# Try out custom summary function
summary(modi4)
# Access glm object of first replicate
summary(modi4@fits$replicate_01$`test-mxe`)
# Define external threshold
thmxe=c(`test-mxe`=0.5)
# Evaluate the model
eval4=wsl.evaluate(modi4,crit="external",thres=thmxe)
# Get evaluation summary
summary(eval4)
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
})
mat=do.call("rbind",a)
out=colMeans(mat)
return(out)
}
# Get thresholds
tst=get_thres(eval4)
x=eval4
summary(x)
y=x@performance
y
a=sapply(y,function(z){
return(z["threshold"])
})
a
z=y[[1]]
z
z["threshold"]
y
y=x@performance[[1]]
y
z=y[[1]]
z
z["threshold"]
a=sapply(y,function(z){
return(z["threshold"])
})
a
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
retrun(thrs)
})
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(thrs)
})
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
thrs
mat=do.call("rbind",thrs)
mat
class(mat)
out=colMeans(mat)
out
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
mat=do.call("rbind",thrs)
out=colMeans(mat)
return(out)
}
# Get thresholds
tst=get_thres(eval4)
tst
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
mat=do.call("rbind",thrs)
colnames(mat)=gsub("threshold.","",colnames(mat))
out=colMeans(mat)
return(out)
}
# Get thresholds
tst=get_thres(eval4)
thst
tst
# Get thresholds
tst=get_thres(eval4)
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
mat=do.call("rbind",thrs)
out=colMeans(mat)
names(out)=gsub("threshold.","",names(out))
return(out)
}
# Get thresholds
tst=get_thres(eval4)
tst
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
mat=do.call("rbind",thrs)
out=colMeans(mat)
names(out)=gsub(".threshold","",names(out))
return(out)
}
# Get thresholds
tst=get_thres(eval4)
tst
form.glm.2=as.formula(paste("Presence~",paste(vrs,collapse="+")))
modinp=list(multi("glm",list(formula=form.glm,family="binomial"),"glm-simple",step=TRUE),
multi("gbm",list(formula=form.gbm,
distribution = "bernoulli",
interaction.depth = 1,
shrinkage=.01,
n.trees = 3500),"gbm-simple"),
multi("gam",list(formula=form.gam,family="binomial"),"gam-simple",step=FALSE),
multi("maxent",list(args=feat),"mxe-simple"),
multi("randomForest",list(formula=form.gbm,ntree=500),"waud"),
multi("glm",list(formula=form.glm.2,family="binomial"),"glm-lin",step=TRUE))
# Try out wsl.glm funcion
modi5=wsl.flex(pa=Anguilla_train$Angaus,
env_vars = env,
taxon="Angaus",
replicatetype="block-cv",
reps=3,
strata=sample(1:3,nrow(env),replace=TRUE),
project="multitest",
mod_args=modinp)
# Try out custom summary function
summary(modi5)
# Access glm object of first replicate
summary(modi5@fits$replicate_01$`glm-simple`)
# Evaluate the model
eval5<-wsl.evaluate(modi5,crit="max")
# Get evaluation summary
summary(eval5)
# Get thresholds
tst=get_thres(eval5)
tst
# Evaluate the model
eval5<-wsl.evaluate(modi5,crit="maxTSS")
# ###########################################################################
# Evaluation function and class definition
#
# $Date: 2018-05-08 V2
# Author: Philipp Brun, philipp.brun@wsl.ch
# Dynamic Macroecology Group
# Swiss Federal Research Institute WSL
#
#
#############################################################################
### =========================================================================
### Set Class
### =========================================================================
wsl.evaluation<-setClass("wsl.evaluation",slots=c(meta="list", # Meta information
thres="numeric", # supply external threshold
performance="list")) # conserve function call
### =========================================================================
### define wsl.evaluate function
### =========================================================================
#
wsl.evaluate<-function(x,tester=data.frame(),thres=numeric(),crit="pp=op"){
### ------------------------
### check tresholds
### ------------------------
# thres has to be a vector with named elements (same names
# as in evaluation matrix)
if(length(thres)>0){
if(length(x@fits[[1]])!=length(thres)){
stop("Wrong number of thresholds supplied! Should be one threshold per model type...")
}
if(crit!="external"){
warning("Assuming you want external tresholds to be used - setting crit='external'!")
crit="external"
}
}
if(!(crit%in%c("pp=op","maxTSS","external"))){
stop("Invalid threshold criterion chosen!")
}
### ------------------------
### Check testing data and prepare for evaluation
### ------------------------
if(x@meta$replicatetype=="none" && nrow(tester)==0){
stop("External testing data must be supplied for replicatetype 'none'")
} else if(x@meta$replicatetype%in%c("cv","block-cv","splitsample")) {
outerloop<-length(x@tesdat)
testa<-lapply(x@tesdat,function(x){
y<-x[,-which(colnames(x)=="Presence")]
})
papa<-lapply(x@tesdat,function(x){
y<-x[,"Presence"]
})
} else if(x@meta$replicatetype=="none"){
outerloop<-1
testa<-list(tester[,-which(colnames(tester)=="Presence")])
papa<-list(tester[,"Presence"])
}
### ------------------------
### generate wsl.evaluation and add meta info
### ------------------------
out<-preva.meta(type="evaluation")
### -------------------------------------------
### Evaluate models
### -------------------------------------------
lis<-list()
# loop over replicates
for(i in 1:length(x@fits)){
lisa<-list()
# Loop over model types
for(j in 1:length(x@fits[[1]])){
# Make prediction
pred=prd(x@fits[[i]][[j]],testa[[i]])
#Feed with external threshold if available
if(length(thres)==0){
scores<-ceval(f=pred,
pa=papa[[i]],
tesdat=testa[[i]],
crit=crit)
} else{
scores<-ceval(f=pred,
pa=papa[[i]],
tesdat=testa[[i]],
tre=thres[which(names(thres)==names(x@fits[[i]])[j])],
crit=crit)
}
lisa[[j]]<-scores
}
names(lisa)=names(x@fits[[i]])
lis[[i]]<-lisa
}
names(lis)<-names(x@fits)
out@performance<-lis
return(out)
}
### =========================================================================
### define summary function for wsl.evaluation objects
### =========================================================================
sm=setMethod("summary",signature(object="wsl.evaluation"),definition=function(object){
cat("\nMeta information: \n")
df=data.frame(object@meta[c("author","date")],object@meta$wsl.fit[c("project","replicatetype","replicates")])
rownames(df)=""
print(df)
cat("\nThreshold: \n")
df=as.data.frame(object@meta[c("cutoff")])
rownames(df)=""
print(df)
cat("\nMean skill: \n")
mats=list()
for(i in 1:length(object@performance)){
mats[[i]]=do.call("cbind",object@performance[[i]])
}
mn=Reduce("+", mats) / length(mats)
print(mn)
})
### =========================================================================
### pull out mean thresholds from evaluation
### =========================================================================
get_thres=function(x){
thrs=lapply(x@performance,function(y){
a=sapply(y,function(z){
return(z["threshold"])
})
return(a)
})
mat=do.call("rbind",thrs)
out=colMeans(mat)
names(out)=gsub(".threshold","",names(out))
return(out)
}
# Evaluate the model
eval5<-wsl.evaluate(modi5,crit="maxTSS")
# Get evaluation summary
summary(eval5)
# Get thresholds
tst=get_thres(eval5)
tst
pred5=wsl.predict(modi5,predat=env,thres=thr.5)
# Get thresholds
thr.5=get_thres(eval5)
pred5=wsl.predict(modi5,predat=env,thres=thr.5)
summary(pred5@predictions[[1]][[1]])
summary(pred5@predictions[[1]][[2]])
summary(pred5@predictions[[1]][[3]])
# Evaluate the model
eval5<-wsl.evaluate(modi5,crit="pp=op")
# Get thresholds
thr.5=get_thres(eval5)
thr.5
pred5=wsl.predict(modi5,predat=env,thres=thr.5)
summary(pred5@predictions[[1]][[3]])
summary(pred5@predictions[[1]][[2]])
summary(pred5@predictions[[1]][[1]])
