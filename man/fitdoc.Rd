% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_fitting.R
\name{fitdoc}
\alias{fitdoc}
\alias{wsl.glm}
\alias{wsl.gam}
\alias{wsl.maxent}
\alias{wsl.gbm}
\alias{wsl.ann}
\alias{wsl.flex}
\title{Fit presence-absence models}
\usage{
wsl.glm(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  step = FALSE,
  mod_tag = "",
  xy = NULL,
  ...
)

wsl.gam(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  step = FALSE,
  mod_tag = "",
  xy = NULL,
  ...
)

wsl.maxent(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  mod_tag = "",
  xy = NULL,
  ...
)

wsl.gbm(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  mod_tag = "",
  xy = NULL,
  ...
)

wsl.ann(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  mod_tag = "",
  xy = NULL,
  ...
)

wsl.flex(
  x = numeric(),
  pa = numeric(),
  env_vars = data.frame(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  mod_args = list(),
  xy = NULL
)
}
\arguments{
\item{x}{Optional. Object of class 'wsl.pseudoabsences'. If used 'pa', 'env_vars' and 'taxon'
will be replaced by new set of values set in the object.}

\item{pa}{Object of class 'vector' with presence/absence values}

\item{env_vars}{Object of class 'data.frame' with environmental predictors}

\item{taxon}{Name of the taxon for which models are fitted}

\item{replicatetype}{(How) should replicates be generated? May be 'none', 'splitsample',
'cv' or 'block-cv'}

\item{reps}{Number of replicates}

\item{strata}{A numeric vector of the same length as observations with integers separating
cross validation replicates. Only used when replicatetype='block-cv'}

\item{save}{Should the model be saved in a structured way? (not implemented yet)}

\item{project}{Character indicating the name of the project within which the models are run
(later used to define saving directories)}

\item{path}{Where to save? (not implemented yet)}

\item{step}{For glms and gams only. Should the models be updated with the step function?}

\item{mod_tag}{Not in wsl.flex. Descriptive label for current model}

\item{xy}{Optional. XY coordinates of observations. Used for post evaluation with
presence-only metric when pres_abs=TRUE in wsl.evaluate.pres(). Must be a data.frame()
or matrix().}

\item{mod_args}{List with elements of class 'multi.input' which specify models to be fitted
in wsl.flex}
}
\value{
Object of class wsl.fit including slots for meta info, testing data for
evaluation, and model objects
}
\description{
Flexibly fit various types of functions but let framework take care of resampling,
meta-info storage, and file saving. wsl.flex basically allows supplying any possible
model, however, there may be problems with prediction/evaluation for exotic functions.
Available model algorithms for fitting are: Generalized Linear Models (GLM), Generalized
additive models (GAM), Maximum Entropy (MaxEnt), Artificial Neural Networks (ANN),
Generalized Boosted regression Models/Boosted Regression Trees (GBM) and Random Forest (RF)
}
\examples{

# Take anguilla data set from dismo package
data("Anguilla_train")
vrs=c("SegSumT","USRainDays","USSlope")
env=Anguilla_train[,vrs]

### Check out wsl.glm
form.glm=as.formula(paste("Presence~",paste(paste0("poly(",vrs,",2)"),collapse="+")))

modi1=wsl.glm(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="cv",
              reps=5,
              project="prototest",
              mod_tag="test-glm",
              formula=form.glm,
              family="binomial",
              step=TRUE)

# Try out custom summary function
summary(modi1)

# Access glm object of first replicate
summary(modi1@fits$replicate_01$`test-glm`)

# Evaluate the model
eval1=wsl.evaluate.pa(modi1)

# Get evaluation summary
summary(eval1)

### Check out wsl.gam
form.gam=as.formula(paste("Presence~",paste(paste0("s(",vrs,")"),collapse="+")))

# Try out wsl.glm funcion
modi2=wsl.gam(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="splitsample",
              reps=3,
              project="prototest",
              mod_tag="test-gam",
              formula=form.gam,
              family="binomial",
              step=FALSE)

# Try out custom summary function
summary(modi2)

# Access glm object of first replicate
summary(modi2@fits$replicate_01$`test-gam`)

# Evaluate the model
eval2=wsl.evaluate.pa(modi2,crit="maxTSS")

# Get evaluation summary
summary(eval2)

### Check out wsl.gbm
form.gbm=as.formula(Presence ~ .)

# Try out wsl.glm funcion
modi3=wsl.gbm(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="none",
              reps=1,
              project="prototest",
              mod_tag="test-brt",
              formula= form.gbm,
              distribution = "bernoulli",
              interaction.depth = 1,
              shrinkage=.01,
              n.trees = 3500)

# Try out custom summary function
summary(modi3)

# Access glm object of first replicate
summary(modi3@fits$replicate_01$`test-brt`)

# Prepare external testing data
tste=data.frame(Presence=Anguilla_train$Angaus,env)

# Evaluate the model
eval3=wsl.evaluate.pa(modi3,crit="maxTSS",tester=tste)

# Get evaluation summary
summary(eval3)

### Check out wsl.maxent
feat=c("linear=true","quadratic=true","hinge=true","product=true","threshold=false")

# Try out wsl.glm funcion
modi4=wsl.maxent(pa=Anguilla_train$Angaus,
                 env_vars = env,
                 taxon="Angaus",
                 replicatetype="block-cv",
                 reps=3,
                 strata=sample(1:3,nrow(env),replace=TRUE),
                 project="prototest",
                 mod_tag="test-mxe",
                 args=feat)

# Try out custom summary function
summary(modi4)

# Access glm object of first replicate
summary(modi4@fits$replicate_01$`test-mxe`)

# Define external threshold
thmxe=c(`test-mxe`=0.5)

# Evaluate the model
eval4=wsl.evaluate.pa(modi4,crit="external",thres=thmxe)

# Get evaluation summary
summary(eval4)

# Get thresholds
thr.4=get_thres(eval4)

### Check out wsl.flex
form.glm.2=as.formula(paste("Presence~",paste(vrs,collapse="+")))

modinp=list(multi("glm",list(formula=form.glm,family="binomial"),"glm-simple",step=TRUE,weight=TRUE),
multi("gbm",list(formula=form.gbm,
                 distribution = "bernoulli",
                 interaction.depth = 1,
                 shrinkage=.01,
                 n.trees = 3500),"gbm-simple"),
multi("gam",list(formula=form.gam,family="binomial"),"gam-simple",step=FALSE,weight=TRUE)),
multi("maxent",list(args=feat),"mxe-simple"),
multi("randomForest",list(formula=form.gbm,ntree=500,maxnodes=NULL),"waud1"),
multi("glm",list(formula=form.glm.2,family="binomial"),"glm-lin",step=TRUE,weight=TRUE)))

# Try out wsl.glm funcion
modi5=wsl.flex(pa=Anguilla_train$Angaus,
               env_vars = env,
               taxon="Angaus",
               replicatetype="block-cv",
               reps=3,
               strata=sample(1:3,nrow(env),replace=TRUE),
               project="multitest",
               mod_args=modinp)

# Try out custom summary function
summary(modi5)

# Access glm object of first replicate
summary(modi5@fits$replicate_01$`glm-simple`)

# Evaluate the model
eval5<-wsl.evaluate.pa(modi5,crit="pp=op")

# Get evaluation summary
summary(eval5)

# Get thresholds
thr.5=get_thres(eval5)

}
\author{
Philipp Brun, Yohann Chauvier
}
