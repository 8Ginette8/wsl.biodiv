% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_ppm_fit.R
\name{fitppm}
\alias{fitppm}
\alias{wsl.ppmGlasso}
\title{Fit Poisson Point Process Models (PPPM)}
\usage{
wsl.ppmGlasso(
  pres = data.frame(),
  env_vars = matrix(),
  quadPoints = wsl.quads(),
  asurface = numeric(),
  taxon = character(),
  replicatetype = character(),
  reps,
  strata = NA,
  save = FALSE,
  project = NA,
  path = NA,
  mod_tag = "",
  poly = TRUE,
  which_poly = NULL,
  lasso = TRUE,
  penalty.glmnet = NULL,
  ...
)
}
\arguments{
\item{pres}{Object of class 'data.frame' or 'matrix'. Coordinates xy of Species observations.}

\item{env_vars}{If 'wsl.ppmGlasso' used, must be an object of class 'matrix' or 'data.frame'
with environmental predictor values. Note that categorical predictor values must be of class factor for
both 'env_vars' and 'quadPoints@Qenv'.}

\item{quadPoints}{If 'wsl.ppmGlasso' used, must a 'wsl.quads' object generated with 'wsl.quadrature'
function and 'lasso=TRUE'.}

\item{asurface}{The surface of the study area in square kilometers.}

\item{taxon}{Name of the taxon for which models are fitted.}

\item{replicatetype}{(How) should replicates be generated? may be 'none', 'splitsample',
'cv' or 'block-cv'.}

\item{reps}{Number of replicates.}

\item{strata}{A numeric vector of the same length as observations + quadrature points with
integers assigning cross validation replicates. Only used when replicatetype='block-cv'.
Note: the vector must first integrate CV information for observation points.}

\item{save}{Should the model be saved in a structured way? (not implemented yet).}

\item{project}{Character indicating the name of the project within which the models are run
(later used to define saving directories).}

\item{path}{Where to save? (not implemented yet).}

\item{mod_tag}{Descriptive label for current model.}

\item{poly}{If TRUE, PPPM fits a second order polynomial regression.}

\item{which_poly}{Which predictors should be using polynomial terms? Use a binary vector that
specify which variables/predictors. Length of vector must be equal to the number of input variables.
'1' stands for poly=TRUE whereas '0' stands for poly=FALSE. Default is polynomial for all if poly=TRUE.}

\item{lasso}{If FALSE no regularisation is applied.}

\item{penalty.glmnet}{If 'lasso=TRUE', a binary vector that specify which variables/predictors
used to model should be shrinked. Length of vector must be equal to the number of input
variables. '1' stands for shrinkage whereas '0' stands for no shrinkage, i.e. the variable
will always be included in the model.}

\item{...}{If 'wsl.ppmGlasso' used with lasso = TRUE, arguments passed on to the
cv.glmnet() function (package 'glmnet') use to apply a Lasso, Ridge or Elastic Net
regularisation. To notice that the package's argument 'penalty.factor' is not needed
here. If used, the parameter 'penalty.glmnet' must instead be filled for each 'env_vars'.
If lasso = FALSE, arguments passed on to the glm("poisson") function.}

\item{formula}{Equation of the desired fit.}
}
\value{
Object of class wsl.fit including slots for meta info, testing data for
evaluation, and model objects.
}
\description{
PPPM (Poisson Point Process Models) is a modelling approach genrally design to use
observation-only data aka point occurences. It allows the user to model species observations
intensity per unit area (i.e. the density of presence points over a spatial grid) as a log
linear function of predictors. Quadrature points (or background points) are necessary in the
model, and may be generated with the 'wsl.quadrature' function. Those points apply a spatial
scaling proportional to the study area and estimate the maximised model log likelihood (see
Renner 2013, Renner et al. 2015). 'wsl.ppmGlasso' applies a point process model, but also by
choosing to implement regularisation and variable selection following the package "glmnet".
}
\examples{

### Load

data(AlpineConvention_lonlat)
data(exrst)
rst = rst[[1:6]]
data(xy_ppm)
mypoints = xy.ppm[,c("x","y")]

### Define mask

maskR = mask(rst[[1]],shp.lonlat)

### Run 'wsl.ppm.window' function

wind = wsl.ppm.window(mask = maskR,
                      val = 1,
                      owin = TRUE)

### Define quadrature points for 'wsl.ppmGlasso'

   # Grid regular
quadG1 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = FALSE,
                        lasso = TRUE,
                        env_vars = rst)

### Define your environments

   # For 'wsl.ppmGlasso' (observations focus)
envG = raster::extract(rst,mypoints)

### Modelling

   # 'wsl.ppmGlasso' (alpha = 0.5 => Elastic net, see package 'glmnet')
       # Complex PPPM lasso (poly = TRUE & lasso=TRUE)

ppm.lasso = wsl.ppmGlasso(pres = mypoints,
                       quadPoints = quadG1,
                       asurface = raster::area(shp.lonlat)/1000,
                       env_vars = envG,
                       taxon = "species_eg1",
                       replicatetype = "cv",
                       reps = 5,
                       strata = NA,
                       save=FALSE,
                       project = "lasso_eg1",
                       path = NA,
                       poly = TRUE,
                       lasso = TRUE,
                       alpha = 0.5,
                       type.measure = "mse",
                       standardize = TRUE,
                       nfolds = 5,
                       nlambda = 100,
                       penalty.glmnet=c(1,0,1,1,1,1))

       # Simple PPPM non lasso (poly = FALSE & lasso=FALSE)

ppm.simple = wsl.ppmGlasso(pres = mypoints,
                       quadPoints = quadG1,
                       asurface = raster::area(shp.lonlat)/1000,
                       env_vars = envG,
                       taxon = "species_eg2",
                       replicatetype = "cv",
                       reps = 5,
                       strata = NA,
                       save = FALSE,
                       project = "lasso_eg2",
                       path = NA,
                       poly = FALSE,
                       lasso = FALSE)

}
\author{
Yohann Chauvier, Philipp Brun
}
