% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_blocks.R
\name{make_blocks}
\alias{make_blocks}
\title{Block-wise split data into training and testing}
\usage{
make_blocks(
  nstrat = 4,
  df = data.frame(),
  nclusters = nstrat * 5,
  npoints = NA,
  pres = numeric()
)
}
\arguments{
\item{nstrat}{Number of approximately equal-sized classes to separate groups in block-cross validation}

\item{df}{Object of class 'data.frame' with n columns containing critera for cluster building.
Not necessary if argument npoints is supplied}

\item{nclusters}{Number of clusters based on which strata should be built.
Minimum is the same number as 'nstrat'. Maximum is nrow(df)/10.}

\item{npoints}{Optional argument if 'df' is not supplied. For how many points
should random sampling be made?}

\item{pres}{Binary vector. Optional argument. If 'df' is supplied, the argument can be used to
save processing time or if number of row/points > 65,536 (pam hard-limit). '1' stands for the points
on which k-medoid clustering is appplied (most likely the species observations), and '0' stands
for the points on which K-nearest neighbors is applied relative to the '1' (most likely the absences,
background points...). If 'df' is not supplied. For which points should random sampling be made?}
}
\value{
Object of class 'vector' of length nrow(df) or 'npoints', with integers defining
different strata
}
\description{
Creates a stratum vector based on a data.frame with n columns. If the data.frame
has one column strata are created based on clusters separated by quantiles. If
the data.frame has two or more columns, strata are created based on k-medoid
clusters (function 'pam' from package cluster). Instead of a data.frame also the
argument 'npoints' can be provided, then groups are created by random sampling.
An opitimization algorithm (function 'gridSearch' from package NMOF) optimizes
for equal stratum sizes.
}
\examples{
### Test out block generation function

data("Anguilla_train")
vrs=c("SegSumT","USRainDays","USSlope")
env=Anguilla_train[,vrs]

# No layers supplied
strt.1=make_blocks(npoints=1000)
table(strt.1)

# Stratified by 1d layer a
strt.2=make_blocks(df=env[,1,drop=F],nstrat=5,nclusters=5)
table(strt.2)

# Stratified by 1d layer b
strt.3=make_blocks(df=env[,1,drop=F],nstrat=5,nclusters=15)
table(strt.3)

# Stratified by 2d layer a
strt.4=make_blocks(df=env[,c(1,3)],nstrat=3,nclusters=3)
table(strt.4)

# Stratified by 2d layer b
strt.5=make_blocks(df=env[,c(1,3)],nstrat=5,nclusters=50)
table(strt.5)

# Stratified by 3d layer
strt.6=make_blocks(df=env[,1:3],nstrat=5,nclusters=50)
table(strt.6)

par(mfrow=c(3,2))
plot(env[,c(1,3)],col=strt.1)
plot(env[,c(1,3)],col=strt.2)
plot(env[,c(1,3)],col=strt.3)
plot(env[,c(1,3)],col=strt.4)
plot(env[,c(1,3)],col=strt.5)
plot(env[,c(1,3)],col=strt.6)

}
\author{
Philipp Brun
}
