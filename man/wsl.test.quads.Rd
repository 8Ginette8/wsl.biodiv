% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_test_quadrature.R
\name{wsl.test.quads}
\alias{wsl.test.quads}
\title{Poisson Point Process Models (PPPM) 'quadrature' for presence-absence evaluation metrics}
\usage{
wsl.test.quads(mask, quadrature, env_vars, nQ = 10000, replace = TRUE)
}
\arguments{
\item{mask}{Object of class 'RasterLayer' or 'RasterBrick' or 'RasterStack' of. Mask is defined
according to non NAs values. Defines study area in pixels used to grid sample the quadrature points.
Sampling is done over raster centroids so the resolution of the mask defines the desired sampling.
Same as in 'wsl.quadrature'}

\item{quadrature}{Object of class 'wsl.quads' or 'ppp'. May be one object or a list of object.
Same as in wsl.ppm.fit}

\item{env_vars}{An object of class 'RasterStack' or 'RasterBrick'. Same spatial layers used in
the models. Use to extract env values from test quadrature points}

\item{nQ}{Mumber of random quadrature points to sample}

\item{replace}{Logical. If TRUE, quadrature sampling is done with replacements}
}
\value{
Object of class 'wsl.quads' or 'list'. Points associated to NAs env. values are removed
}
\description{
Sample independent test quadrature points over the study area used for evaluating presence-only
models with presence-absence metrics (i.e. AUC, TSS, Kappa, PPV...). Presence-only models can
be evaluated with other metrics than Boyce index by using random sampling points as absences.
But these absences validation data need to be generated independenly over the study area i.e.
by avoiding resampling quadrature points already used in the models.
}
\examples{

#### Load

data(AlpineConvention_lonlat)
data(exrst)

### Define mask

maskR = mask(rst[[1]],shp.lonlat)

### Define quadrature points for 'wsl.ppmGlasso'

quadG2 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = TRUE,
                        nQ = 10000,
                        lasso = TRUE,
                        env_vars = rst)

### Define quadrature points for 'wsl.ppmO'

quadO2 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = TRUE,
                        nQ = 10000,
                        lasso = FALSE,
                        env_vars = NULL)

### Define quadrature test points for 'wsl.ppmGlasso'

test.quadG2=wsl.quads.test(mask=maskR,
                           quadrature=quadG2,
                           nQ=1000,
                           replace=TRUE)


### Define quadrature test points for 'wsl.ppmO'

test.quadG2=wsl.quads.test(mask=maskR,
                           quadrature=quadO2,
                           nQ=1000,
                           replace=TRUE)


}
\author{
Yohann Chauvier
}
