% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_ppm_quadrature.R
\name{wsl.quadrature}
\alias{wsl.quadrature}
\title{Poisson Point Process Models (PPPM) 'quadrature'}
\usage{
wsl.quadrature(
  mask,
  area.win,
  random = FALSE,
  nQ = 1e+05,
  lasso = TRUE,
  env_vars = NULL
)
}
\arguments{
\item{mask}{Object of class 'RasterLayer' or 'RasterBrick' or 'RasterStack'. Mask is defined
according to non NAs values. Defines study area in pixels used to grid sample the quadrature points.
Sampling is done over raster centroids so the resolution of the mask defines the desired sampling.}

\item{area.win}{Object of class 'owin'. 'owin' output of 'wsl.ppm.window'}

\item{random}{Logical. Should quadrature points be generated randomly or according
to a regular mask ?}

\item{nQ}{To choose the number of random quadrature points in case 'random=TRUE'}

\item{lasso}{Logical. Form of the output. If TRUE, 'wsl.ppmGlasso' is used}

\item{env_vars}{Only when 'lasso=TRUE'. Object of class 'RasterBrick' or 'RasterStack'.
Set of predictors the user wants to use to fit the model}
}
\value{
Object of class 'ppp' or 'wsl.quads'. Points associated to NAs env. values are removed
}
\description{
Set up quadrature points (or "background points") necessary to run 'wsl.ppmO' and
'wsl.ppmGlasso' fit functions. Those points apply a spatial scaling proportional to the study
area and estimate the maximised model log likelihood (see Renner 2013, Renner et al. 2015)
}
\examples{

#### Load

data(AlpineConvention_lonlat)
data(exrst)

### Define mask

maskR = mask(rst[[1]],shp.lonlat)

### Run 'wsl.ppm.window' function

wind = wsl.ppm.window(mask = maskR,
                      val = 1,
                      owin = TRUE)

### Define quadrature points for 'wsl.ppmGlasso'

   # Grid regular
quadG1 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = FALSE,
                        lasso = TRUE,
                        env_vars = rst)

   # Randomly
quadG2 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = TRUE,
                        nQ = 100000,
                        lasso = TRUE,
                        env_vars = rst)

### Define quadrature points for 'wsl.ppmO'

   # Grid regular
quadO1 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = FALSE,
                        lasso = FALSE,
                        env_vars = NULL)

   # Randomly
quadO2 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = TRUE,
                        nQ = 100000,
                        lasso = FALSE,
                        env_vars = NULL)

}
\author{
Yohann Chauvier
}
