% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_predict_pres.R
\name{wsl.predict.pres}
\alias{wsl.predict.pres}
\title{Make predictions}
\usage{
wsl.predict.pres(
  x,
  thres = numeric(),
  predat = list(),
  window = NULL,
  log_trans = TRUE,
  raster = FALSE,
  bias_cov = NULL
)
}
\arguments{
\item{x}{An object of class wsl.fit}

\item{thres}{Optional. Object of the same length as the number of replicates, or model
types if a mean is applied accross model types. Obtained with 'get_thres'}

\item{predat}{Same spatial layers used in the fitted model or an object of class 'data.frame' or 
'matrix' defining a sample of the target layers by keeping same order for columns. If spatial layers,
when wsl.ppmGlasso' used, object of class 'RasterStack' or RasterBrick'.}

\item{log_trans}{Logical. Should the predictions be converted to logarithm before converting to binary ?
Should be TRUE if log.trans was TRUE when using wsl.evaluate}

\item{raster}{Logical. Should the output be a list of rasters or matrix ?}

\item{bias_cov}{A numerical vector whose length equal the number of environmental layers/columns.
Only used when a bias covariate is implemented in the PPM calibration i.e. to fit species observations with
a potential spatial observer bias. Default is 1 for each variable, whereas designated bias covariate(s)
(i.e. 0) will be reset everywhere to zero in order to evaluate corrected predictions}
}
\value{
Object of class wsl.prediction with slots for meta info, and model predictions
}
\description{
Make predictions with all models from a wsl.fit object. If thresholds are supplied
binary predictions are made, otherwise continuous predictions are returned.
}
\examples{

### Load

data(AlpineConvention_lonlat)
data(exrst)
rst = rst[[1:6]]
data(xy_ppm)
mypoints = xy.ppm[,c("x","y")]

### Define mask

maskR = mask(rst[[1]],shp.lonlat)

### Run 'wsl.ppm.window' function

wind = wsl.ppm.window(mask = maskR,
                      val = 1,
                      owin = TRUE)

### Define quadrature points for 'wsl.ppmGlasso'

   # Grid regular
quadG1 = wsl.quadrature(mask = maskR,
                        area.win = wind,
                        random = FALSE,
                        lasso = TRUE,
                        env_vars = rst)

### Define your environments

   # For 'wsl.ppmGlasso' (observations focus)
envG = raster::extract(rst,mypoints)

### Modelling

   # 'wsl.ppmGlasso' (alpha = 0.5 => Elastic net, see package 'glmnet')
       # Complex PPPM lasso (poly = TRUE & lasso=TRUE)

lasso1 = wsl.ppmGlasso(pres = mypoints,
                       quadPoints = quadG1,
                       asurface = raster::area(shp.lonlat)/1000,
                       env_vars = envG,
                       taxon = "species_eg1",
                       replicatetype = "cv",
                       reps = 5,
                       strata = NA,
                       save=FALSE,
                       project = "lasso_eg1",
                       path = NA,
                       type = "binomial",
                       mask = maskR,
                       poly = TRUE,
                       lasso = TRUE,
                       alpha = 0.5,
                       type.measure = "mse",
                       standardize = TRUE,
                       nfolds = 5,
                       nlambda = 100)

       # Simple PPPM non lasso (poly = FALSE & lasso=FALSE)

lasso2 = wsl.ppmGlasso(pres = mypoints,
                       quadPoints = quadG1,
                       asurface = raster::area(shp.lonlat)/1000,
                       env_vars = envG,
                       taxon = "species_eg2",
                       replicatetype = "cv",
                       reps = 5,
                       strata = NA,
                       save = FALSE,
                       project = "lasso_eg2",
                       path = NA,
                       type = "binomial",
                       mask = maskR,
                       poly = FALSE,
                       lasso = FALSE)

### Evaluation

   # Example for 'wsl.ppmGlasso'

eval1 = wsl.evaluate.pres(x = lasso1,
                          env_vars = rst)

eval2 = wsl.evaluate.pres(x = lasso2,,
                          env_vars = rst,
                          thres = 0.001)

summmary(eval1)
summary(eval2)

### Thresholds

get_thres(eval1, mean = FALSE)
get_thres(eval1, mean = TRUE)

get_thres(eval2, mean = FALSE)
get_thres(eval2, mean = TRUE)

### Predictions

   # 'wsl.ppmGlasso'
pred1 = wsl.predict.pres(x = lasso1,
                         predat = rst,
                         mask = maskR,
                         thres = get_thres(eval1,mean=FALSE),
                         raster = TRUE)

par(mfrow=c(2,3))
sapply(1:5,function(x) plot(pred1@predictions[[x]][[1]]))

pred2 = wsl.predict.pres(x = lasso2,
                         predat = rst,
                         mask = maskR,
                         thres = NULL,
                         raster = TRUE)

par(mfrow=c(2,3))
sapply(1:5,function(x) plot(pred2@predictions[[x]][[1]]))

pred3 = wsl.predict.pres(x = lasso1,
                         predat = rst,
                         mask = maskR,
                         thres = get_thres(eval1,mean=TRUE),
                         raster = TRUE)

par(mfrow=c(2,3))
sapply(1:5,function(x) plot(pred3@predictions[[x]][[1]]))

pred4 = wsl.predict.pres(x = lasso2,
                         predat = rst,
                         mask = maskR,
                         thres = NULL,
                         raster = FALSE)

}
\author{
Yohann Chauvier, Philipp Brun
}
