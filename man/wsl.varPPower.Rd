% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_varPPower.R
\name{wsl.varPPower}
\alias{wsl.varPPower}
\title{Predictive power assessments of predictors}
\usage{
wsl.varPPower(
  points,
  val,
  species = NULL,
  ras,
  rasCLASS = NULL,
  mlinear = FALSE,
  mixEffect = FALSE,
  mixCat = NULL,
  glmMODE = "binomial",
  weight = 1,
  poly = FALSE,
  polyBRUT = FALSE,
  parallel = FALSE,
  parINFOS = NULL,
  cores = detectCores()/2,
  ...
)
}
\arguments{
\item{points}{Numeric. Object of class 'matrix' or 'data frame' with two columns named
"x" and "y", or 'SpatialPoints', or 'list' of 'SpatialPoints'. "points" should
be of same length as "val", "species" and "weight"}

\item{val}{Numeric. Object of class 'vector' if "points" is of class 'matrix' or 'data.frame',
otherwise object of class 'list'. Binary observations if "glmMODE="binomial",
discrete if "glmMODE="poisson", continious if "mlinear=TRUE". Must be of same
length as "points", "species" and "weight"}

\item{species}{Character. Object of class 'vector' specifying the ID of your observations.
No mandatory use except when "points" is a 'list' of 'SpatialPoints'. If used,
must be of same length as "points", "val" and "weight"}

\item{ras}{Object of class 'RasterLayer' or 'list' of 'RasterLayer'. Layers must be
of exact same resolution and extent i.e. exactly the same number of cells}

\item{rasCLASS}{Object of class 'vector' to associate IDs to the raster(s) if
"ras" is a 'list' of 'RasterLayer'}

\item{mlinear}{'TRUE' run lm(), 'FALSE' run glm()}

\item{mixEffect}{Default is FALSE. If 'TRUE' run mLinear with random effect (i.e. mix LM or GLM)}

\item{mixCat}{Character. Object of class 'vector' if "points" is of class 'matrix' or 'data.frame',
otherwise object of class 'list'. Use to assign categories to your observations. Those
are used for potential random effects. Must be of same length as "points", "val" and "species"}

\item{glmMODE}{glm() link function if "mlinear=FALSE" (defaut::"binomial" or "poisson")}

\item{weight}{Numeric. Object of class 'vector' if "points" is of class 'matrix' or 'data.frame',
otherwise object of class 'list'. Used for weighting your observations when running glm()
or lm(). Must be of same length as "points", "val" and "species"}

\item{poly}{If TRUE, glm() or lm() uses a polynomial quadratic transformation on "ras"}

\item{polyBRUT}{If TRUE, force "poly" parameter in cases NAs are found in "ras"}

\item{parallel}{If TRUE, parallelisation is active}

\item{parINFOS}{Path. Create a txt file to write parallelisation infos if "parallel=TRUE".}

\item{cores}{Number of cores if "parallel=TRUE"}

\item{...}{Arguments passed on to the lm() or glm() function}
}
\value{
'wsl.varPPower' object with n slots corresponding to n "rasCLASS". In each
slots: matrix of nrow::c("species" + mean + standard deviation) & ncol::"ras". Where NAs
occur, models could not correctly converged.
}
\description{
Evaluate the predictive power of single spatial predictors for fitting
spatial observations or continous values. Predictors may be classify in
classes to separate the ouputs, and data to explain (Y input) may be binary
(e.g. presences/absences), discrete (e.g. diversity count) or continuous.
Fix and random effects may be used with generalized linear model (GLM) and
simple linear model (LM). Therefore, the function currently implement
D2.adj::glm(), R2.adj::lm(), pseudo-R2::glmer() and pseudo-R2::lmer(). D2 is
calculated via the ecospat package and pseudo-R2 with the MuMIn package for mixed
models. Quadratic terms may also be used for more flexible fits, and a
parallel argument is available if processing the data is too time consuming.
}
\examples{
### Data Preparation

rm(list = setdiff(ls(), lsf.str()))

# Load environmental rasters and assign random raster Class
data(exrst)
rCLASS = c(rep("Pollution",4),rep("Climate",4),rep("LandCover",4))

# Create a list of rasters out of the rasterBRICK
rasterL = unstack(rst)

# Load my binary observations species data
data(var_select_XYtest)

# Create a category vector
mixV = sample(LETTERS[1:3], 35743, replace=TRUE)

### wsl.varPPower(): example with a data.frame & rasters not in classes

PPower.DF = wsl.varPPower(points=sp.DF[,c("x","y")],
                      val = sp.DF$myPA,
                      species = sp.DF$spCODES,
                      ras = rasterL,
                      rasCLASS = NULL,
                      mlinear = FALSE,
                      glmMODE = "binomial",
                      weight = sp.DF$myWEIGHT,
                      poly = TRUE,
                      polyBRUT = TRUE,
                      parallel = FALSE,
                      cores = NULL)

### wsl.varPPower(): Same example including random effect
PPower.DF = wsl.varPPower(points = sp.DF[,c("x","y")],
                      val = sp.DF$myPA,
                      species = sp.DF$spCODES,
                      ras = rasterL,
                      rasCLASS = NULL,
                      mlinear = FALSE,
                      mixEffect = TRUE,
                      mixCat = mixV,
                      glmMODE = "binomial",
                      weight = sp.DF$myWEIGHT,
                      poly = TRUE,
                      polyBRUT = FALSE,
                      parallel = FALSE,
                      cores = NULL)

### wsl.varPPower(): example with a data.frame & rasters in classes
PPower.DF = wsl.varPPower(points=sp.DF[,c("x","y")],
                        val = sp.DF$myPA,
                        species = sp.DF$spCODES,
                        ras = rasterL,
                        rasCLASS = rCLASS,
                        mlinear = FALSE,
                        glmMODE = "binomial",
                        weight = sp.DF$myWEIGHT,
                        poly = TRUE,
                        polyBRUT = TRUE,
                        parallel = FALSE,
                        cores = NULL)

### wsl.varPPower(): Same example including random effect
PPower.DF = wsl.varPPower(points=sp.DF[,c("x","y")],
                        val = sp.DF$myPA,
                        species = sp.DF$spCODES,
                        ras = rasterL,
                        rasCLASS = rCLASS,
                        mlinear = FALSE,
                        mixEffect = TRUE,
                        mixCat = mixV,
                        glmMODE = "binomial",
                        weight = sp.DF$myWEIGHT,
                        poly = TRUE,
                        polyBRUT = TRUE,
                        parallel = FALSE,
                        cores = NULL)

### wsl.varPPower(): example with SpatialPointsDataFrame & rasters in classes

# Checking length of every species input
c(length(mySP),length(myPA),length(spCODES),length(myWEIGHT))

# Generate new random effect classes
mixL = lapply(sapply(mySP,length),function(x) sample(LETTERS[1:3],x, replace=TRUE))

# Running the function
PPower.SPDF = wsl.varPPower(points = mySP[[1]],
                          val = myPA[[1]],
                          species = NULL,
                          ras = rasterL,
                          rasCLASS = rCLASS,
                          mlinear = FALSE,
                          mixEffect=TRUE,
                          mixCat=mixL[[1]],
                          glmMODE = "binomial",
                          weight = myWEIGHT[[1]],
                          poly = TRUE,
                          polyBRUT = TRUE,
                          parallel = FALSE,
                          cores = NULL)

}
\author{
Yohann Chauvier
}
