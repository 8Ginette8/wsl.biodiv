% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wsl_predict.R
\name{wsl.predict.pa}
\alias{wsl.predict.pa}
\title{Make predictions}
\usage{
wsl.predict.pa(
  x,
  predat = data.frame(),
  thres = numeric(),
  bias_cov = NULL,
  clust = FALSE
)
}
\arguments{
\item{x}{An object of class wsl.fit}

\item{predat}{Data.frame or raster for which predictions should be made}

\item{thres}{Optional. Object of the same length as the number of replicates, or model
types if a mean is applied accross model types. Obtained with 'get_thres'}

\item{bias_cov}{A numerical vector whose length equal the number of environmental layers/columns.
Only used when a bias covariate is implemented in calibrations i.e. to fit species observations with
a potential spatial observer bias. Default is 1 for each variable, whereas designated bias covariate(s)
(i.e. 0) will be reset everywhere to zero in order to evaluate corrected predictions}

\item{clust}{Logical. If raster predictions are made, should the operation be run in parallel ?}
}
\value{
Object of class wsl.prediction with slots for meta info, and model predictions
}
\description{
Make predictions with all models from a wsl.fit object. If thresholds are supplied
binary predictions are made if convert=TRUE, otherwise continuous predictions and
separate description of thresholds are returned
}
\examples{

# Take anguilla data set from dismo package
data("Anguilla_train")
vrs=c("SegSumT","USRainDays","USSlope")
env=Anguilla_train[,vrs]

### Check out wsl.glm
form.glm=as.formula(paste("Presence~",paste(paste0("poly(",vrs,",2)"),collapse="+")))

modi1=wsl.glm(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="cv",
              reps=5,
              project="prototest",
              mod_tag="test-glm",
              formula=form.glm,
              family="binomial",
              step=TRUE)

# Try out custom summary function
summary(modi1)

# Access glm object of first replicate
summary(modi1@fits$replicate_01$`test-glm`)

# Evaluate the model
eval1=wsl.evaluate.pa(modi1)

# Get evaluation summary
summary(eval1)

### Check out wsl.gam
form.gam=as.formula(paste("Presence~",paste(paste0("s(",vrs,")"),collapse="+")))

# Try out wsl.glm funcion
modi2=wsl.gam(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="splitsample",
              reps=3,
              project="prototest",
              mod_tag="test-gam",
              formula=form.gam,
              family="binomial",
              step=FALSE)

# Try out custom summary function
summary(modi2)

# Access glm object of first replicate
summary(modi2@fits$replicate_01$`test-gam`)

# Evaluate the model
eval2=wsl.evaluate.pa(modi2,crit="maxTSS")

# Get evaluation summary
summary(eval2)

### Check out wsl.gbm
form.gbm=as.formula(Presence ~ .)

# Try out wsl.glm funcion
modi3=wsl.gbm(pa=Anguilla_train$Angaus,
              env_vars = env,
              taxon="Angaus",
              replicatetype="none",
              reps=1,
              project="prototest",
              mod_tag="test-brt",
              formula= form.gbm,
              distribution = "bernoulli",
              interaction.depth = 1,
              shrinkage=.01,
              n.trees = 3500)

# Try out custom summary function
summary(modi3)

# Access glm object of first replicate
summary(modi3@fits$replicate_01$`test-brt`)

# Prepare external testing data
tste=data.frame(Presence=Anguilla_train$Angaus,CV=1,env)

# Evaluate the model
eval3=wsl.evaluate.pa(modi3,crit="maxTSS",tester=tste)

# Get evaluation summary
summary(eval3)

### Check out wsl.maxent
feat=c("linear=true","quadratic=true","hinge=true","product=true","threshold=false")

# Try out wsl.glm funcion
modi4=wsl.maxent(pa=Anguilla_train$Angaus,
                 env_vars = env,
                 taxon="Angaus",
                 replicatetype="block-cv",
                 reps=3,
                 strata=sample(1:3,nrow(env),replace=TRUE),
                 project="prototest",
                 mod_tag="test-mxe",
                 args=feat)

# Try out custom summary function
summary(modi4)

# Access glm object of first replicate
summary(modi4@fits$replicate_01$`test-mxe`)

# Define external threshold
thmxe=c(`test-mxe`=0.5)

# Evaluate the model
eval4=wsl.evaluate.pa(modi4,crit="external",thres=thmxe)

# Get evaluation summary
summary(eval4)

# Get thresholds
thr.4=get_thres(eval4)

### Check out wsl.flex
form.glm.2=as.formula(paste("Presence~",paste(vrs,collapse="+")))

modinp=list(multi("glm",list(formula=form.glm,family="binomial"),"glm-simple",step=TRUE,weight=TRUE),
   multi("gbm",list(formula=form.gbm,
   distribution = "bernoulli",
   interaction.depth = 1,
   shrinkage=.01,
   n.trees = 3500),"gbm-simple"), 
   multi("gam",list(formula=form.gam,family="binomial"),"gam-simple",step=FALSE,weight=TRUE),
   multi("maxent",list(args=feat),"mxe-simple"),
   multi("randomForest",list(formula=form.gbm,ntree=500,maxnodes=NULL),"waud1"),
   multi("glm",list(formula=form.glm.2,family="binomial"),"glm-lin",step=TRUE,weight=TRUE))

# Try out wsl.glm funcion
modi5=wsl.flex(pa=Anguilla_train$Angaus,
               env_vars = env,
               taxon="Angaus",
               replicatetype="block-cv",
               reps=3,
               strata=sample(1:3,nrow(env),replace=TRUE),
               project="multitest",
               mod_args=modinp)

# Try out custom summary function
summary(modi5)

# Access glm object of first replicate
summary(modi5@fits$replicate_01$`glm-simple`)

# Evaluate the model
eval5<-wsl.evaluate.pa(modi5,crit="pp=op")

# Get evaluation summary
summary(eval5)

# Get thresholds
thr.5=get_thres(eval5)

### Make some predictions
pred4=wsl.predict.pa(modi4,predat=env)
pred5=wsl.predict.pa(modi5,predat=env,thres=thr.5)

}
\author{
Philipp Brun, Yohann Chauvier
}
